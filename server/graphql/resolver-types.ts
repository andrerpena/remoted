// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Job, Company } from "./model";
import { Context } from "./context";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsJobs {
    offset?: number | null;
    limit?: number | null;
  }

  export type JobsResolver = (
    parent: undefined,
    args: ArgsJobs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;

  export interface Type {
    jobs: (
      parent: undefined,
      args: ArgsJobs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;
  }
}

export namespace JobResolvers {
  export const defaultResolvers = {
    id: (parent: Job) => parent.id,
    title: (parent: Job) => parent.title,
    description: (parent: Job) => parent.description,
    tags: (parent: Job) => parent.tags,
    createdAt: (parent: Job) => parent.createdAt,
    publishedAt: (parent: Job) => parent.publishedAt,
    relativeUrl: (parent: Job) => parent.relativeUrl,
    company: (parent: Job) =>
      parent.company === undefined ? null : parent.company,
    locationRequired: (parent: Job) => parent.locationRequired,
    locationPreferred: (parent: Job) => parent.locationPreferred,
    locationPreferredTimeZone: (parent: Job) =>
      parent.locationPreferredTimeZone,
    locationPreferredTimeZoneTolerance: (parent: Job) =>
      parent.locationPreferredTimeZoneTolerance,
    salaryExact: (parent: Job) => parent.salaryExact,
    salaryMin: (parent: Job) => parent.salaryMin,
    salaryMax: (parent: Job) => parent.salaryMax,
    salaryCurrency: (parent: Job) => parent.salaryCurrency,
    salaryEquity: (parent: Job) => parent.salaryEquity
  };

  export type IdResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TitleResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TagsResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type RelativeUrlResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CompanyResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Company | null | Promise<Company | null>;

  export type CreatedAtResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedAtResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LocationRequiredResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LocationPreferredResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LocationPreferredTimeZoneResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type LocationPreferredTimeZoneToleranceResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SalaryExactResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SalaryMinResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SalaryMaxResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SalaryCurrencyResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SalaryEquityResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    id: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    title: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    tags: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    relativeUrl: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    company: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Company | null | Promise<Company | null>;

    createdAt: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    publishedAt: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    locationRequired: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    locationPreferred: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    locationPreferredTimeZone: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    locationPreferredTimeZoneTolerance: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    salaryExact: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    salaryMin: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    salaryMax: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    salaryCurrency: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    salaryEquity: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export namespace CompanyResolvers {
  export const defaultResolvers = {
    id: (parent: Company) => parent.id,
    name: (parent: Company) => parent.name,
    displayName: (parent: Company) => parent.displayName,
    relativeUrl: (parent: Company) => parent.relativeUrl
  };

  export type IdResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DisplayNameResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RelativeUrlResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    displayName: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    relativeUrl: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface JobInput {
    title: string;
    description: string;
    tags: string[];
    publishedAt: string;
    companyId: number;
    locationRaw?: string | null;
    locationRequired?: string | null;
    locationPreferred?: string | null;
    locationPreferredTimezone?: number | null;
    locationPreferredTimezoneTolerance?: number | null;
    salaryRaw?: string | null;
    salaryExact?: number | null;
    salaryMin?: number | null;
    salaryMax?: number | null;
    salaryCurrency?: string | null;
    salaryEquity?: boolean | null;
  }
  export interface CompanyInput {
    displayName: string;
  }

  export interface ArgsAddJob {
    input: JobInput;
  }

  export interface ArgsAddCompany {
    input: CompanyInput;
  }

  export type AddJobResolver = (
    parent: undefined,
    args: ArgsAddJob,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Job | null | Promise<Job | null>;

  export type AddCompanyResolver = (
    parent: undefined,
    args: ArgsAddCompany,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Company | null | Promise<Company | null>;

  export interface Type {
    addJob: (
      parent: undefined,
      args: ArgsAddJob,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Job | null | Promise<Job | null>;

    addCompany: (
      parent: undefined,
      args: ArgsAddCompany,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Company | null | Promise<Company | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Job: JobResolvers.Type;
  Company: CompanyResolvers.Type;
  Mutation: MutationResolvers.Type;
}
