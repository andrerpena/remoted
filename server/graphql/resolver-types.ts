// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Job, LocationDetails, SalaryDetails, Company } from "./model";
import { Context } from "./context";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsJobs {
    offset?: number | null;
    limit?: number | null;
  }

  export type JobsResolver = (
    parent: undefined,
    args: ArgsJobs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;

  export interface Type {
    jobs: (
      parent: undefined,
      args: ArgsJobs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;
  }
}

export namespace JobResolvers {
  export const defaultResolvers = {
    id: (parent: Job) => parent.id,
    title: (parent: Job) => parent.title,
    description: (parent: Job) => parent.description,
    tags: (parent: Job) => parent.tags,
    createdAt: (parent: Job) => parent.createdAt,
    publishedAt: (parent: Job) => parent.publishedAt,
    relativeUrl: (parent: Job) => parent.relativeUrl,
    company: (parent: Job) =>
      parent.company === undefined ? null : parent.company,
    salary: (parent: Job) =>
      parent.salary === undefined ? null : parent.salary,
    location: (parent: Job) =>
      parent.location === undefined ? null : parent.location
  };

  export type IdResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TitleResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TagsResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type RelativeUrlResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LocationResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LocationDetails | null | Promise<LocationDetails | null>;

  export type SalaryResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SalaryDetails | null | Promise<SalaryDetails | null>;

  export type CompanyResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Company | null | Promise<Company | null>;

  export type CreatedAtResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedAtResolver = (
    parent: Job,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    title: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    tags: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    relativeUrl: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    location: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LocationDetails | null | Promise<LocationDetails | null>;

    salary: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SalaryDetails | null | Promise<SalaryDetails | null>;

    company: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Company | null | Promise<Company | null>;

    createdAt: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    publishedAt: (
      parent: Job,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace LocationDetailsResolvers {
  export const defaultResolvers = {
    requiredLocation: (parent: LocationDetails) =>
      parent.requiredLocation === undefined ? null : parent.requiredLocation,
    preferredLocation: (parent: LocationDetails) =>
      parent.preferredLocation === undefined ? null : parent.preferredLocation,
    preferredTimeZone: (parent: LocationDetails) =>
      parent.preferredTimeZone === undefined ? null : parent.preferredTimeZone,
    preferredTimeZoneTolerance: (parent: LocationDetails) =>
      parent.preferredTimeZoneTolerance === undefined
        ? null
        : parent.preferredTimeZoneTolerance
  };

  export type RequiredLocationResolver = (
    parent: LocationDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PreferredLocationResolver = (
    parent: LocationDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PreferredTimeZoneResolver = (
    parent: LocationDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type PreferredTimeZoneToleranceResolver = (
    parent: LocationDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    requiredLocation: (
      parent: LocationDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    preferredLocation: (
      parent: LocationDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    preferredTimeZone: (
      parent: LocationDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    preferredTimeZoneTolerance: (
      parent: LocationDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace SalaryDetailsResolvers {
  export const defaultResolvers = {
    exact: (parent: SalaryDetails) =>
      parent.exact === undefined ? null : parent.exact,
    min: (parent: SalaryDetails) =>
      parent.min === undefined ? null : parent.min,
    max: (parent: SalaryDetails) =>
      parent.max === undefined ? null : parent.max,
    currency: (parent: SalaryDetails) =>
      parent.currency === undefined ? null : parent.currency,
    equity: (parent: SalaryDetails) =>
      parent.equity === undefined ? null : parent.equity
  };

  export type ExactResolver = (
    parent: SalaryDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type MinResolver = (
    parent: SalaryDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type MaxResolver = (
    parent: SalaryDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type CurrencyResolver = (
    parent: SalaryDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EquityResolver = (
    parent: SalaryDetails,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    exact: (
      parent: SalaryDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    min: (
      parent: SalaryDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    max: (
      parent: SalaryDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    currency: (
      parent: SalaryDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    equity: (
      parent: SalaryDetails,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export namespace CompanyResolvers {
  export const defaultResolvers = {
    id: (parent: Company) => parent.id,
    name: (parent: Company) => parent.name,
    displayName: (parent: Company) => parent.displayName,
    relativeUrl: (parent: Company) => parent.relativeUrl
  };

  export type IdResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DisplayNameResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RelativeUrlResolver = (
    parent: Company,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    displayName: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    relativeUrl: (
      parent: Company,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface JobInput {
    title: string;
    description: string;
    tags: string[];
    publishedAt: string;
    companyId: number;
    location?: LocationDetailsInput | null;
    salary?: SalaryDetailsInput | null;
  }
  export interface CompanyInput {
    displayName: string;
  }
  export interface LocationDetailsInput {
    requiredLocation?: string | null;
    preferredLocation?: string | null;
    preferredTimeZone?: number | null;
    preferredTimeZoneTolerance?: number | null;
  }
  export interface SalaryDetailsInput {
    exact?: number | null;
    min?: number | null;
    max?: number | null;
    currency?: string | null;
    equity?: boolean | null;
  }

  export interface ArgsAddJob {
    input: JobInput;
  }

  export interface ArgsAddCompany {
    input: CompanyInput;
  }

  export type AddJobResolver = (
    parent: undefined,
    args: ArgsAddJob,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;

  export type AddCompanyResolver = (
    parent: undefined,
    args: ArgsAddCompany,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Company | null> | null | Promise<Array<Company | null> | null>;

  export interface Type {
    addJob: (
      parent: undefined,
      args: ArgsAddJob,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Job | null> | null | Promise<Array<Job | null> | null>;

    addCompany: (
      parent: undefined,
      args: ArgsAddCompany,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Company | null> | null | Promise<Array<Company | null> | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Job: JobResolvers.Type;
  LocationDetails: LocationDetailsResolvers.Type;
  SalaryDetails: SalaryDetailsResolvers.Type;
  Company: CompanyResolvers.Type;
  Mutation: MutationResolvers.Type;
}
